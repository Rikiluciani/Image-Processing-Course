import ij.IJ;
import java.util.Arrays;
import iplab.ImageAccess;
import iplab.Operations;

public class Code{
	
	public ImageAccess erodeBug(ImageAccess image){
		boolean b[][] = square(3);
		for(int x=0; x<image.nx; x++)
			for(int y=0; y<image.nx; y++){
				double[][] block = image.getNeighborhood(x,y,3,3);
				double min = Double.MAX_VALUE;
				for(int k=0; k<3; k++)
					for(int l=0; l<3; l++){
						if(b[k][l] == true)
							min = Math.min(block[k][l], min);
					}
			image.putPixel(x,y,min);
			}
		return image;
	}
	public boolean[][] square(int size){
		boolean b[][] = new boolean[size][size];
		for(int x=0; x < size; x++)
			for(int y=0; y < size; y++)
				b[x][y] = true;
		return b;
	}
	public boolean[][] shift(int size){
		boolean b[][] = new boolean[size][size];
		b[0][0] = true;
		return b;
	}
	public boolean[][] cross(int size){
		boolean b[][] = new boolean[size][size];
		for(int x = 0; x < size; x++){
			b[x][size/2] = true;
			b[size/2][x] = true;
		}
		return b;
	}
	public boolean[][] disk(int size){
		boolean b[][] = new boolean[size][size];
		int R = size/2;
		for(int x = -R; x <= R; x++)
			for(int y = -R; y <= R; y++)
				if(Math.sqrt(Math.pow(x, 2)+Math.pow(y, 2))<=R){
					b[x+R][y+R] = true;
				}
		return b;
	}
	public ImageAccess erosion(ImageAccess in, boolean b[][]){
		ImageAccess out = new ImageAccess(in.nx, in.ny);
		int size = b.length;
		for (int x = 0; x < in.nx; x++)
			for (int y = 0; y < in.ny; y++) {
				double[][] block = in.getNeighborhood(x, y, size, size);
				double min = Double.MAX_VALUE; // put the maximum possible value
				for (int k = 0; k < size; k++)
					for (int l = 0; l < size; l++) {
						if (b[k][l] == true) 
							min = Math.min(block[k][l], min);
						}
				out.putPixel(x, y, min);
			}
		return out;
	}
	public ImageAccess dilation(ImageAccess in, boolean b[][]){
		ImageAccess out = new ImageAccess(in.nx, in.ny);
		int size = b.length;
		for (int x =  0; x < in.nx; x++)
			for(int y = 0; y < in.ny; y++){
				double[][] block = in.getNeighborhood(x, y, size, size);
				double max = -Double.MAX_VALUE; // put the minimum possible value
				for (int k = 0; k < size; k++)
					for(int l = 0; l < size; l++){
						if(b[k][l] == true)
							max = Math.max(block[k][l], max);
					}
				out.putPixel(x, y, max);
			}
		return out;
	}
	public ImageAccess open(ImageAccess in, boolean b[][]){
		ImageAccess out = new ImageAccess(in.nx, in.ny);
		out = erosion(in,b);
		out = dilation(out,b);
		return out;
	}
	public ImageAccess close(ImageAccess in, boolean b[][]){
		ImageAccess out = new ImageAccess(in.nx, in.ny);
		out = dilation(in,b);
		out = erosion(out,b);
		return out;
	}
	public ImageAccess gradient(ImageAccess in, boolean b[][]){
		ImageAccess out = new ImageAccess(in.nx, in.ny);
		ImageAccess dilated  = dilation(in,b);
		ImageAccess eroded  = erosion(in,b);
		/*for(int i = 0; i < in.nx; i++)
			for(int j = 0; j < in.ny; j++){
				double n1 = dilated.getPixel(i, j);
				double n2 = eroded.getPixel(i, j);
				double diff = n1-n2;
				out.putPixel(i, j, diff);
			}*/
		out = Operations.subtract(dilated, eroded);
		return out;
	}
	public ImageAccess topHat(ImageAccess in, boolean b[][]){
		ImageAccess out = new ImageAccess(in.nx,in.ny);
		ImageAccess opened = open(in,b);
		out = Operations.subtract(in, opened);
		return out;
	}
	public ImageAccess bottomHat(ImageAccess in, boolean b[][]){
		ImageAccess out = new ImageAccess(in.nx,in.ny);
		ImageAccess closed = close(in,b);
		out = Operations.subtract(closed, in);
		return out;
	}
	public ImageAccess median(ImageAccess in, boolean b[][]){
		ImageAccess out = new ImageAccess(in.nx,in.ny);
		int size = b.length;
		for (int x = 0; x < in.nx; x++)
			for (int y = 0; y < in.ny; y++) {
				double[][] block = in.getNeighborhood(x, y, size, size);
				double arr[] = new double[size*size];
				for (int k = 0; k < size; k++)
					for (int l = 0; l < size; l++) {
						if (b[k][l] == true) 
							arr[k*size+l] = block[k][l];	
						}
				Arrays.sort(arr); //Sort 1D array
				double central = arr[arr.length/2];
				out.putPixel(x, y, central);
			}
		return out;
	}
	public ImageAccess skeletonize(ImageAccess in){
		ImageAccess out = new ImageAccess(in.nx,in.ny);
		ImageAccess eroded = new ImageAccess(in.nx,in.ny);
		boolean b[][] = square(3);
		boolean e[][] = cross(3);
		int i = 0;
		ImageAccess temp = in;
		ImageAccess partial = new ImageAccess(in.nx,in.ny);
		while(i<Double.POSITIVE_INFINITY){
			int flag = 0;
			eroded = erosion(temp,e);
			for(int x = 0; x<eroded.nx; x++)
				for(int y = 0; y<eroded.nx; y++){
					double p = eroded.getPixel(x, y);
					if(p != 0)
						flag = 1;
				}
			if (flag == 0)
				break;
			partial = topHat(eroded,b);
			out = union(out,partial);
			temp = eroded;
			i++;
		}
		IJ.log(String.valueOf(i));
		return out;
	}
	public ImageAccess skeletonizeAndPrune(ImageAccess in, int m){
		ImageAccess out = new ImageAccess(in.nx,in.ny);
		ImageAccess eroded = new ImageAccess(in.nx,in.ny);
		boolean b[][] = square(3);
		boolean e[][] = cross(3);
		int i = 0;
		ImageAccess temp = in;
		ImageAccess partial = new ImageAccess(in.nx,in.ny);
		while(i < m){
			int flag = 0;
			eroded = erosion(temp,e);
			for(int x = 0; x<eroded.nx; x++)
				for(int y = 0; y<eroded.nx; y++){
					double p = eroded.getPixel(x, y);
					if(p != 0)
						flag = 1;
				}
			if (flag == 0)
				break;
			partial = topHat(eroded,b);
			out = union(out,partial);
			temp = eroded;
			i++;
		}
		//IJ.log(String.valueOf(i));
		return out;
	}
	
	private ImageAccess union(ImageAccess in1, ImageAccess in2){
		ImageAccess out = new ImageAccess(in1.nx,in1.ny);
		double p = 0;
		double q = 0;
		double r = 0;
		for(int x = 0; x < in1.nx; x++)
				for(int y = 0; y < in1.nx; y++){
					p = in1.getPixel(x, y);
					q = in2.getPixel(x, y);
					if(p==q)
						r = p;
					else
						r = Math.max(p, q);
					out.putPixel(x, y, r);
				}
		return out;
	}
	
}
